<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2 on Erik Wijmans</title>
    <link>https://wijmans.xyz/publication_types/2/</link>
    <description>Recent content in 2 on Erik Wijmans</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020</copyright>
    <lastBuildDate>Sun, 28 Aug 2022 14:53:59 -0400</lastBuildDate>
    
	<atom:link href="https://wijmans.xyz/publication_types/2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VER: Scaling On-Policy RL Leads to Emergence of Navigation in Embodied Rearrangement</title>
      <link>https://wijmans.xyz/publication/ver/</link>
      <pubDate>Sun, 28 Aug 2022 14:53:59 -0400</pubDate>
      
      <guid>https://wijmans.xyz/publication/ver/</guid>
      <description>Introduction How can we combine the benefit of synchronous (high sample efficiency) and asynchronous (high throughput) systems for batched on-policy reinforcement learning?
Systems for batched on-policy reinforcement learning collect experience from many (N) environments simultaneously using the policy and update it with this cumulative experience. They are broadly divided into two classes: synchronous (Sync) and asynchronous (Aync). Sync contains two synchronization points: first the policy is executed for the entire batch $(o_t \rightarrow a_t)^B_{b=1}$ (A), then actions are executed in all environments, $(s_t, a_t \rightarrow s_{t+1}, o_{t+1})^B_{b=1}$ (B), until $T$ steps have been collected from all $N$ environments.</description>
    </item>
    
  </channel>
</rss>